// Это ф-я для файла example3.js с fo/of
// В файле example5.js это написано с помощь тернарного оператора

// * Напиши ф-ю findLogin , которая принимает все логины logins и один loginToFind который нужно найти в них => findLogin(allLogins, loginToFind

const logins = ['js', '1234', '123456', '12345678'];

const findLogin = function (allLogins, loginToFind) {
// что происходит под капотом => allLogins = logins

    // при пустых скобках {} ф-я возвращает undefined потому что в {} не явный возврат
        // записываем
    // console.log(allLogins);
    // console.log(loginToFind) = '12';
        // это закоментируем позже после написания if/else и видим значения undefined. Почему? Потому что сделали задачу но не вернули. И тогда добавляем return
    
    let message = `Пользователь ${loginToFind} не найден.`

    for (const login of allLogins) {
        if (login === loginToFind) {
            message = `Пользователь ${loginToFind} найден.`
        }
        // console.log(login)
    }

    return message;

};
    
//    findLogin(logins);    <= программист не надеется на магическую глобальную переменную, которая используется в этой1 функции; все что ф-я использует она должна получить из-вне как аргумент (то есть записать какой-то параметр) и во время вызова ф-и findLogin() мы туда эти логины передаю показывает. Дает возможность работать с параметром loginsNew. И если в findLogin (..) в масиве где-бы он не находился и в вызове ф-и соответственно, поменять наименование на findLogin(....) ф-я все еще будет работать. Ф-я самостоятельна, все с чем она работает она получает из вне. Поэтому такую ф-ю можно хранить в одном файле, а в другом ее вызывать и с того файла кидать в ф-ю данные.


console.log(findLogin(logins, 'js'));
console.log(findLogin(logins, '1234'));
console.log(findLogin(logins, '123456'));
console.log(findLogin(logins, '12345678'));
// в переменноой loginsNew лежит массив ['12', '1234', '123456', '12345678']. Тоесть мы берем буквально этот массив и вставляем console.log(findLogin(['12', '1234', '123456', '12345678'], '12'));

